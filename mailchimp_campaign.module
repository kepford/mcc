<?php

/**
 * Implements hook_permission()
 */
function mailchimp_campaign_permission() {
  return array(
    'administer mailchimp campaign' =>  array(
      'title' => t('Administer MailChimp campaigns'),
      'description' => t('Administer MailChimp campaigns for node types.'),
    ),
    'send mailchimp campaign' => array(
      'title' => t('Send MailChimp campaigns'),
      'description' => t('Create and send MailChiimp campaigns form nodes.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mailchimp_campaign_menu() {
  $items['mailchimp-campaign/%cid/update/%'] = array(
    'title' => 'Update',
    'page callback' => '_mailchimp_campaign_action_access',
    'page arguments' => array(1, 3, 'update'),
    'access arguments' => array('send mailchimp campaign'),
    'type' => MENU_CALLBACK,
  );
  $items['mailchimp-campaign/%cid/send/%'] = array(
    'title' => 'Send',
    'page callback' => '_mailchimp_campaign_action_access',
    'page arguments' => array(1, 3, 'send'),
    'access arguments' => array('send mailchimp campaign'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function mailchimp_campaign_theme($existing, $type, $theme, $path) {
  return array(
    'mailchimp_campaign_node_campaigns_list' => array(
      'variables' => array('node_campaigns' => array()),
    ),
    'mailchimp_campaign_mclinks' => array(
      'variables' => array('data' => NULL),
    ),
    'mailchimp_campaign_actions' => array(
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Put MailChimp campaign module setting to the node type edit form.
 */
function mailchimp_campaign_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {

    $form['mailchimp_campaign'] = array(
      '#type' => 'fieldset',
      '#title' => t('MailChimp campaign'),
      '#group' => 'additional_settings',
    );
    $form['mailchimp_campaign']['mailchimp_campaign_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable MailChimp campaigns'),
      '#default_value' => variable_get('mailchimp_campaign_enabled_' . $form['#node_type']->type, FALSE),
    );
    $form['mailchimp_campaign']['mailchimp_campaign_list'] = array(
      '#type' => 'select',
      '#title' => t('Lists'),
      '#default_value' => variable_get('mailchimp_campaign_list_' . $form['#node_type']->type, FALSE),
      '#options' => _mailchimp_campaign_lists_options(),
    );
  }
}

/**
 * Implements hook_node_view().
 * Put MailChimp campaign create and send form to the full node view.
 */
function mailchimp_campaign_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $campaign_enabled = variable_get('mailchimp_campaign_enabled_' . $node->type, FALSE);
    if ($campaign_enabled) {
      $result = db_select('mailchimp_campaign_node_campaigns', 'm')
        ->fields('m')
        ->condition('nid', $node->nid, '=')
        ->orderBy('update_time', 'DESC')
        ->execute();

      $node_campaigns = array();
      while ($row = $result->fetchAssoc()) {
        if ($row['data']) {
          $row['data'] = unserialize($row['data']);
        }
        $node_campaigns[$row['cid']] = $row;
      }
      if (!empty($node_campaigns)) {
        $node->content['mailchimp_campaign']['list'] = array(
          '#markup' => theme('mailchimp_campaign_node_campaigns_list', array('node_campaigns' => $node_campaigns)),
        );
      }

      $node->content['mailchimp_campaign']['create'] = array(
        drupal_get_form('mailchimp_campaign_create_form', $node),
      );
    }
  }
}

/**
 * Returns a list with the campaigns of a node.
 */
function theme_mailchimp_campaign_node_campaigns_list($variables) {
  $node_campaigns = $variables['node_campaigns'];
  $header = array(t('ID'), t('Title'), t('Status'), t('MC links'), t('Last updated'), t('Actions'));

  foreach ($node_campaigns as $cid => $campaign) {
    $row = array();
    $row[] = $cid; // ID
    if ($campaign['data']) {
      $row[] = $campaign['data']['title']; // Title
      $row[] = $campaign['data']['status']; // Status
      $row[] = theme('mailchimp_campaign_mclinks', array('data' => $campaign['data'])); // MC links
    }
    else {
      $row[] = '<em>' . t('No available information, please update.') . '</em>';
      $row[] = '<em>' . t('No available information, please update.') . '</em>';
      $row[] = '<em>' . t('No available information, please update.') . '</em>';
    }
    $row[] = format_date($campaign['update_time']); // Last updated
    $row[] = theme('mailchimp_campaign_actions', array('data' => $campaign['data'])); // Actions

    $rows[] = $row;
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Returns MC links as item list.
 */
function theme_mailchimp_campaign_mclinks($variables) {
  $data = $variables['data'];

  $items = array();
  $items[] = _mailchimp_campaign_mailchimp_admin_link(t('Edit'), 'campaigns/show', $data['web_id']);
  $items[] = l('Web archive page', $data['archive_url'], array('attributes' => array('target' => '_blank')));
  if (in_array($data['status'], array('sending', 'sent'))) {
    $items[] = _mailchimp_campaign_mailchimp_admin_link(t('Reports'), 'reports/summary', $data['web_id']);
  }

  return theme('item_list', array('items' => $items));
}

/**
 * Returns action (update/send) links.
 */
function theme_mailchimp_campaign_actions($variables) {
  $data = $variables['data'];

  $items = array();
  $items[] = l(t('Update'), 'mailchimp-campaign/' . $data['id'] . '/update/' . drupal_get_token('mailchimp_campaign'));
  if ($data['status'] == 'save') {
    $items[] = l(t('Send'), 'mailchimp-campaign/' . $data['id'] . '/send/' . drupal_get_token('mailchimp_campaign'));
  }

  return theme('item_list', array('items' => $items));
}

/**
 * Form for create MailChimp campaign, from node content.
 */
function mailchimp_campaign_create_form($form, &$form_state) {
  $form['mailchimp_campaign_create'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create new MailChimp camaign'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['mailchimp_campaign_create']['create'] = array(
    '#type' => 'submit',
    '#value' => t('Create new campaign from node'),
  );
  return $form;
}

/**
 * Create MailChimp campaign on form submission.
 */
function mailchimp_campaign_create_form_submit($form, $form_state) {
  if (isset($form_state['build_info']['args'][0]->nid)) {
    $node = $form_state['build_info']['args'][0];
    mailchimp_campaign_create($node);
  }
}

/**
 * Create MailChimp campaign from a node.
 */
function mailchimp_campaign_create($node, $options = array()) {
  $mcapi = _mailchimp_get_api_object();
  $type = 'regular';
  $options = array(
    'list_id' => variable_get('mailchimp_campaign_list_' . $node->type, FALSE),
    'subject' => check_plain($node->title),
    'from_email' => 'juhasz.as@gmail.com',
    'from_name' => 'From Name',
    'title' => check_plain($node->title),
    'template_id' => '194517',
  );
  $content = array(
    'html_main' => $node->body['und'][0]['safe_value'],
    'text' => 'plain', // TODO
  );

  // Create campaign on MailChimp.
  $cid = $mcapi->campaignCreate($type, $options, $content);

  if ($mcapi->errorCode) {
    // Display and log error, if any.
    $message = t('MailChimp error. The campaign was not created.') . ' ' . _mailchimp_campaign_mcapi_error_message($mcapi);

    drupal_set_message($message, 'error');
    watchdog('mailchimp_campaign', $message, array(), WATCHDOG_ERROR);
  }
  else {
    // Write campaign details to the database.
    $record = array();
    // Request all campaign datas from MailChimp.
    $record = mailchimp_campaign_update_campaign($cid, FALSE);
    $record['nid'] = $node->nid;
    $record['vid'] = $node->vid;
    drupal_write_record('mailchimp_campaign_node_campaigns', $record);

    $message = t('Campaign was created! (ID: <em>!cid</em>)', array('!cid' => $cid));

    drupal_set_message($message);
    watchdog('mailchimp_campaign', $message);
  }
}

/**
 * Update camaign datas in the database.
 */
function mailchimp_campaign_update_campaign($cid, $update = TRUE) {
  $mcapi = _mailchimp_get_api_object();

  $record = array(
    'cid' => $cid,
    'update_time' => REQUEST_TIME,
  );

  // Request all datas from the campaign.
  $campaign = $mcapi->campaigns(array('campaign_id' => $cid));

  if ($mcapi->errorCode) {
    // Diplay and log error if any.
    $message = t('Some error has occured while get datas from MailChimp. Please visit the <em>!mcadmin</em>!', array('!mcadmin' => _mailchimp_campaign_mailchimp_admin_link(t('Campaigns admin page'), 'campaigns/'))) . ' ' . _mailchimp_campaign_mcapi_error_message($mcapi);

    drupal_set_message($message, 'error');
    watchdog('mailchimp_campaign', $message, array(), WATCHDOG_ERROR);
  }
  else {
    $record['data'] = serialize($campaign[0]);

    if ($update) {
      // Update record.
      drupal_write_record('mailchimp_campaign_node_campaigns', $record, array('cid'));

      $message = t('<em>!title</em> campaign datas was updated.', array('!title' => $campaign[0]['title']));

      drupal_set_message($message);
      watchdog('mailchimp_campaign', $message);
    }
  }

  return $record;
}

/**
 * Send MailChimp campaign.
 */
function mailchimp_campaign_send($cid) {
  $mcapi = _mailchimp_get_api_object();

  // Send campaign.
  $sent = $mcapi->campaignSendNow($cid);

  if ($mcapi->errorCode) {
    // Display and log error, if any.
    $message = t('MailChimp error. The campaign was not sent (Campaign Id: <em>!cid</em>).', array('!cid' => $cid)) . ' ' . _mailchimp_campaign_mcapi_error_message($mcapi);

    drupal_set_message($message, 'error');
    watchdog('mailchimp_campaign', $message, array(), WATCHDOG_ERROR);
  }
  else {
    // Update campaign details in the database.
    mailchimp_campaign_update_campaign($cid);

    $message = t('MailChimp campaign was sent, campaign Id: <em>!cid</em>.', array('!cid' => $cid));

    drupal_set_message($message);
    watchdog('mailchimp_campaign', $message);
  }
}

function cid_load($cid) {
  return db_select('mailchimp_campaign_node_campaigns', 'm')
    ->fields('m')
    ->condition('cid', $cid)
    ->execute()
    ->fetchAssoc();
}

/**
 * Validate user before update or send a campaign.
 */
function _mailchimp_campaign_action_access($campaign, $token, $op) {
  if (drupal_valid_token($token, 'mailchimp_campaign')) {
    switch ($op) {
      case 'update':
        mailchimp_campaign_update_campaign($campaign['cid']);
        break;
      case 'send':
        mailchimp_campaign_send($campaign['cid']);
        break;
    }
  }
  drupal_goto('node/' . $campaign['nid']);
}

/**
 * Get url or link to MaliChimp admin pages.
 */
function _mailchimp_campaign_mailchimp_admin_link($text = '', $path = '', $web_id = '', $return_url = FALSE) {
  $key = variable_get('mailchimp_api_key', FALSE);
  if ($key) {
    $dc = explode('-', $key, 2);
    $url = 'https://' . $dc[1] . '.admin.mailchimp.com/';

    if ($path) {
      $url .= $path;
    }
    if ($web_id) {
      $url .= '?id=' . $web_id;
    }

    if ($return_url) {
      return $url;
    }
    elseif ($text) {
      return l($text, $url, array('attributes' => array('target' => '_blank')));
    }
  }

  return FALSE;
}

/**
 * Returns translatable error message text, with MailChimp error.
 */
function _mailchimp_campaign_mcapi_error_message($mcapi) {
  return t('MailChimp error code: <em>!errorCode</em>, MailChimp error message: <em>!errorMessage</em>.', array('!errorCode' => $mcapi->errorCode, '!errorMessage' => $mcapi->errorMessage));
}

/**
 * Returns an array of mailing lists, for option values.
 */
function _mailchimp_campaign_lists_options() {
  $lists_variable = variable_get('mailchimp_lists', array());

  $lists = array();
  foreach ($lists_variable as $list) {
    $lists[$list->id] = $list->name;
  }

  return $lists;
}
