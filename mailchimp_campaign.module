<?php

/**
 * Implements hook_permission()
 */
function mailchimp_campaign_permission() {
  return array(
    'administer mailchimp campaign' =>  array(
      'title' => t('Administer MailChimp campaigns'),
      'description' => t('Administer MailChimp campaigns for node types.'),
    ),
    'send mailchimp campaign' => array(
      'title' => t('Send MailChimp campaigns'),
      'description' => t('Create and send MailChiimp campaigns form nodes.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mailchimp_campaign_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {

    $form['mailchimp_campaign'] = array(
      '#type' => 'fieldset',
      '#title' => t('MailChimp campaign'),
      '#group' => 'additional_settings',
    );
    $form['mailchimp_campaign']['mailchimp_campaign_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable MailChimp campaigns'),
      '#default_value' => variable_get('mailchimp_campaign_enabled_' . $form['#node_type']->type, FALSE),
    );
    $form['mailchimp_campaign']['mailchimp_campaign_list'] = array(
      '#type' => 'select',
      '#title' => t('Lists'),
      '#default_value' => variable_get('mailchimp_campaign_list_' . $form['#node_type']->type, FALSE),
      '#options' => _mailchimp_campaign_lists_options(),
    );
  }
}

/**
 * Returns an array of mailing lists, for option values.
 */
function _mailchimp_campaign_lists_options() {
  $lists_variable = variable_get('mailchimp_lists', array());

  $lists = array();
  foreach ($lists_variable as $list) {
    $lists[$list->id] = $list->name;
  }

  return $lists;
}

/**
 * Implements hook_node_view().
 */
function mailchimp_campaign_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $campaign_enabled = variable_get('mailchimp_campaign_enabled_' . $node->type, FALSE);
    if ($campaign_enabled) {
      $result = db_select('mailchimp_campaign_node_campaigns', 'm')
        ->fields('m')
        ->condition('nid', $node->nid, '=')
        ->execute();

      $node_campaigns = array();
      foreach ($result as $row) {
        $node_campaigns[] = array(
        );
      }

      $node->content['mailchimp'] = array(
        drupal_get_form('mailchimp_campaign_operationsform', $node),
      );
    }
  }
}

/**
 * Form for create and send MailChimp campaign, from node content.
 */
function mailchimp_campaign_operationsform($form, &$form_state) {
  $form['mailchimp_campaign'] = array(
    '#type' => 'fieldset',
    '#title' => t('MailChimp camaign'),
    '#collapsible' => TRUE,
  );
  $form['mailchimp_campaign']['create'] = array(
    '#type' => 'submit',
    '#value' => t('Create campaign from node'),
    '#submit' => array('mailchimp_campaign_operationsform_create'),
  );
  $form['mailchimp_campaign']['send'] = array(
    '#type' => 'submit',
    '#value' => t('Send campaign'),
    '#submit' => array('mailchimp_campaign_operationsform_send'),
  );
  return $form;
}

/**
 * Create MailChimp campaign on form submission.
 */
function mailchimp_campaign_operationsform_create($form, $form_state) {
  if (isset($form_state['build_info']['args'][0]->nid)) {
    $node = $form_state['build_info']['args'][0];
    mailchimp_campaign_create($node);
  }
}

/**
 * Send MailChimp campaign on form submission.
 */
function mailchimp_campaign_operationform_send($form, $form_state) {
  if (isset($form_state['build_info']['args'][0]->nid)) {
    $node = $form_state['build_info']['args'][0];
    mailchimp_campaign_send($node);
  }
}

/**
 * Create MailChimp campaign from a node.
 */
function mailchimp_campaign_create($node, $options = array()) {
  $mcapi = _mailchimp_get_api_object();
  $type = 'regular';
  $options = array(
    'list_id' => variable_get('mailchimp_campaign_list_' . $node->type, FALSE),
    'subject' => check_plain($node->title),
    'from_email' => 'juhasz.as@gmail.com',
    'from_name' => 'From Name',
    'title' => check_plain($node->title),
    'template_id' => '194517',
  );
  $content = array(
    'html_main' => $node->body['und'][0]['safe_value'],
    'text' => 'plain', // TODO
  );

  // Create campaign on MailChimp.
  $cid = $mcapi->campaignCreate($type, $options, $content);

  if ($mcapi->errorCode) {
    // Display and log error, if any.
    $message = t('MailChimp error. The campaign was not created.') . ' ' . _mailchimp_campaign_mcapi_error_message($mcapi);

    drupal_set_message($message, 'error');
    watchdog('mailchimp_campaign', $message, array(), WATCHDOG_ERROR);
  }
  else {
    $record = array(
      'nid' => $node->nid,
      'vid' => $node->vid,
      'cid' => $cid,
      'update_time' => REQUEST_TIME,
    );

    // Request all datas from campaign.
    $campaign = $mcapi->campaigns(array('campaign_id' => $cid));

    if ($mcapi->errorCode) {
      // Diplay and log error if any.
      $message = t('<em>!title</em> campaign was created, but some error has occured. Please visit the <em>!mcadmin</em>!', array('!title' => $options['title'], '!mcadmin' => _mailchimp_campaign_mailchimp_admin_page('campaigns'))) . ' ' . _mailchimp_campaign_mcapi_error_message($mcapi);

      drupal_set_message($message, 'error');
      watchdog('mailchimp_campaign', $message, array(), WATCHDOG_ERROR);
    }
    else {
      $record['data'] = serialize($campaign[0]);

      $mcadmin_page = _mailchimp_campaign_mailchimp_campaign_admin_link('MailChimp campaign admin page', $campaign[0]['web_id']);
      $web_archive = l('Web archive page', $campaign[0]['archive_url']);
      $message = t('<em>!title</em> campaign was created. <em>!mcadmin_page</em>. <em>!web_archive</em>.', array('!title' => $campaign[0]['title'], '!mcadmin_page' => $mcadmin_page, '!web_archive' => $web_archive));

      drupal_set_message($message);
      watchdog('mailchimp_campaign', $message);
    }

    // Write campaign details to the database.
    drupal_write_record('mailchimp_campaign_node_campaigns', $record);
  }
}

/**
 * Send MailChimp campaign.
 */
function mailchimp_campaign_send($cid) {
  $mcapi = _mailchimp_get_api_object();

  // Send campaign.
  $sent = $mcapi->campaignSendNow();

  if ($mcapi->errorCode) {
    // Display and log error, if any.
    $message = t('MailChimp error. The campaign was not sent (Campaign Id: <em>!cid</em>).', array('!cid' => $cid)) . ' ' . _mailchimp_campaign_mcapi_error_message($mcapi);

    drupal_set_message($message, 'error');
    watchdog('mailchimp_campaign', $message, array(), WATCHDOG_ERROR);
  }
  else {
    // Update campaign details in the database.
    $record = array(
      'cid' => $cid,
      'sent' => 1,
    );

    drupal_write_record('mailchimp_campaign_node_campaigns', $record, 'cid');

    $campaign_admin_link = _mailchimp_campaign_campaign_admin_url($cid);
    $message = t('MailChimp campaign was sent, campaign Id: <em>!cid</em>.', array('!cid' => $campaign_admin_link));

    drupal_set_message($message);
    watchdog('mailchimp_campaign', $message);
  }
}

/**
 * Get url or link to MaliChimp admin pages.
 */
function _mailchimp_campaign_mailchimp_admin_page($type = 'url') {
  $key = variable_get('mailchimp_api_key', FALSE);
  if ($key) {
    $dc = explode('-', $key, 2);
    $url = 'https://' . $dc[1] . '.admin.mailchimp.com/';

    switch ($type) {
      case 'admin':
          return l(t('MailChimp admin page'), $url);
        break;
      case 'campaigns':
          return l(t('MailChimp campaigns admin page'), $url . 'campaigns/');
        break;
      case 'url':
        return $url;
        break;
    }
  }

  return FALSE;
}

/**
 * Get link to a campaign admin page.
 */
function _mailchimp_campaign_mailchimp_campaign_admin_link($text, $web_id) {
  return l($text, _mailchimp_campaign_mailchimp_admin_page() . 'campaigns/show?id=' . $web_id);
}

/**
 * Returns translatable error message text, with MailChimp error.
 */
function _mailchimp_campaign_mcapi_error_message($mcapi) {
  return t('MailChimp error code: <em>!errorCode</em>, MailChimp error message: <em>!errorMessage</em>.', array('!errorCode' => $mcapi->errorCode, '!errorMessage' => $mcapi->errorMessage));
}


